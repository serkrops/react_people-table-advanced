{"version":3,"sources":["helpers/getLinkClass.tsx","components/Navbar.tsx","App.tsx","components/PageNotFound.tsx","utils/searchHelper.ts","components/SearchLink.tsx","utils/constants.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","api.ts","components/PersonLink.tsx","components/People.tsx","helpers/getSortedParams.tsx","components/PeopleList.tsx","helpers/getSortedPeople.tsx","components/PeoplePage.tsx","components/HomePage.tsx","Root.tsx","index.tsx"],"names":["getLinkClass","isActive","classNames","Navbar","className","role","to","App","PageNotFound","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","THEAD_TITLES","CENTURIES","SEX_FILTER_LINKS","PeopleFilters","query","sex","centuries","setSearchParams","handleSexSelected","filterPath","handleResetAllFilters","onClick","type","placeholder","onChange","event","target","map","century","includes","cntr","newCenturies","filter","prevCentury","cent","toggleCenturies","length","href","Loader","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PersonLink","person","slug","name","People","useParams","selectedPerson","born","died","mother","father","motherName","fatherName","getSortedParams","newSortType","prevSortType","order","sort","PeopleList","persons","isParentsExist","title","normalizedTitle","toLowerCase","getSortedPeople","personsClone","personA","personB","localeCompare","reverse","Math","ceil","getCentury","PeoplePage","useState","setPersons","isLoading","setIsLoading","isError","setIsError","get","getAll","useEffect","getPeople","catch","finally","filteredPersons","find","isSomethingWrong","isLoaded","HomePage","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.59d17ec7.chunk.js","sourcesContent":["import classNames from 'classnames';\n\nexport const getLinkClass = (\n  { isActive }: { isActive: boolean },\n) => classNames(\n  'navbar-item',\n  {\n    'has-background-grey-lighter': isActive,\n  },\n);\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { getLinkClass } from '../helpers/getLinkClass';\n\nexport const Navbar: React.FC = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink className={getLinkClass} to=\"/\">\n            Home\n          </NavLink>\n\n          <NavLink className={getLinkClass} to=\"people\">\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import './App.scss';\nimport { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <Navbar />\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","export const PageNotFound: React.FC = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","export const NOT_SET_VALUE = '-';\nexport const THEAD_TITLES = ['Name', 'Sex', 'Born', 'Died', 'Mother', 'Father'];\nexport const FATHER_THEAD_TITLE = 'Father';\nexport const MOTHER_THEAD_TITLE = 'Mother';\nexport const CENTURIES = ['16', '17', '18', '19', '20'];\nexport const SEX_FILTER_LINKS = {\n  All: '',\n  Male: 'm',\n  Female: 'f',\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchLink } from './SearchLink';\nimport { CENTURIES, SEX_FILTER_LINKS } from '../utils/constants';\n\ntype Props = {\n  query: string,\n  sex: string,\n  centuries: string[],\n};\n\nexport const PeopleFilters: React.FC<Props> = ({\n  query,\n  sex,\n  centuries,\n}) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  function handleChangeQuery(event: React.ChangeEvent<HTMLInputElement>) {\n    const params = new URLSearchParams(searchParams);\n\n    params.set('query', event.target.value);\n    setSearchParams(params);\n  }\n\n  function handleSexSelected(filterPath: string | null) {\n    const params = new URLSearchParams(searchParams);\n\n    params.set('sex', filterPath || '');\n    setSearchParams(params);\n  }\n\n  function toggleCenturies(cntr: string) {\n    const params = new URLSearchParams(searchParams);\n\n    const newCenturies = centuries.includes(cntr)\n      ? centuries.filter(prevCentury => prevCentury !== cntr)\n      : [...centuries, cntr];\n\n    params.delete('centuries');\n    newCenturies.forEach(cent => params.append('centuries', cent));\n    setSearchParams(params);\n  }\n\n  function handleClearAllCenturies() {\n    const params = new URLSearchParams(searchParams);\n\n    params.delete('centuries');\n    setSearchParams(params);\n  }\n\n  function handleResetAllFilters() {\n    const params = new URLSearchParams(searchParams);\n\n    params.delete('sex');\n    params.delete('query');\n    setSearchParams(params);\n  }\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classNames({\n            'is-active': sex === SEX_FILTER_LINKS.All,\n          })}\n          params={{ sex: null }}\n          onClick={() => handleSexSelected(null)}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          className={classNames({\n            'is-active': sex === SEX_FILTER_LINKS.Male,\n          })}\n          params={{ sex: SEX_FILTER_LINKS.Male }}\n          onClick={() => handleSexSelected(SEX_FILTER_LINKS.Male)}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          className={classNames({\n            'is-active': sex === SEX_FILTER_LINKS.Female,\n          })}\n          params={{ sex: SEX_FILTER_LINKS.Female }}\n          onClick={() => handleSexSelected(SEX_FILTER_LINKS.Female)}\n        >\n          Female\n        </SearchLink>\n      </p>\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleChangeQuery}\n          />\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {CENTURIES.map(century => (\n              <button\n                key={century}\n                type=\"button\"\n                data-cy=\"century\"\n                className={classNames('button mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n                onClick={() => toggleCenturies(century)}\n              >\n                {century}\n              </button>\n            ))}\n          </div>\n          <div className=\"level-right ml-4\">\n            <button\n              type=\"button\"\n              data-cy=\"centuryALL\"\n              className={classNames('button is-success', {\n                'is-outlined': !!centuries.length,\n              })}\n              onClick={handleClearAllCenturies}\n            >\n              All\n            </button>\n          </div>\n        </div>\n      </div>\n      <div className=\"panel-block\">\n        <a\n          className=\"button is-link is-outlined is-fullwidth\"\n          href=\"#/people\"\n          onClick={() => handleResetAllFilters}\n        >\n          Reset all filters\n        </a>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../types';\nimport { SEX_FILTER_LINKS } from '../utils/constants';\n\ntype Props = {\n  person: Person,\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => (\n  <Link\n    to={`../${person.slug}`}\n    className={classNames(\n      { 'has-text-danger': person.sex === SEX_FILTER_LINKS.Female },\n    )}\n  >\n    {person.name}\n  </Link>\n);\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\nimport { NOT_SET_VALUE } from '../utils/constants';\n\ntype Props = {\n  person: Person,\n};\n\nexport const People: React.FC<Props> = ({ person }) => {\n  const { selectedPerson = '' } = useParams();\n  const {\n    sex,\n    born,\n    died,\n    mother,\n    father,\n    motherName,\n    fatherName,\n    slug,\n  } = person;\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames({\n        'has-background-warning': selectedPerson === slug,\n      })}\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {mother ? (\n          <PersonLink person={mother} />\n        ) : (\n          motherName || NOT_SET_VALUE\n        )}\n      </td>\n      <td>\n        {father ? (\n          <PersonLink person={father} />\n        ) : (\n          fatherName || NOT_SET_VALUE\n        )}\n      </td>\n    </tr>\n  );\n};\n","import { SearchParams } from '../utils/searchHelper';\n\nexport function getSortedParams(\n  newSortType: string,\n  prevSortType: string,\n  order: string,\n): SearchParams {\n  if (prevSortType !== newSortType) {\n    return {\n      sort: newSortType,\n      order: null,\n    };\n  }\n\n  if (prevSortType === newSortType && !order) {\n    return { order: 'desc' };\n  }\n\n  return {\n    sort: null,\n    order: null,\n  };\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Person } from '../types';\nimport { People } from './People';\nimport {\n  FATHER_THEAD_TITLE,\n  MOTHER_THEAD_TITLE,\n  THEAD_TITLES,\n} from '../utils/constants';\nimport { SearchLink } from './SearchLink';\nimport { getSortedParams } from '../helpers/getSortedParams';\n\ntype Props = {\n  sort: string,\n  order: string,\n  persons: Person[],\n};\n\nexport const PeopleList: React.FC<Props> = ({\n  sort,\n  order,\n  persons,\n}) => {\n  const isParentsExist = (title: string) => {\n    return (MOTHER_THEAD_TITLE === title || FATHER_THEAD_TITLE === title);\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {THEAD_TITLES.map(title => {\n            const normalizedTitle = title.toLowerCase();\n\n            return (\n              <th key={title}>\n                {isParentsExist(title)\n                  ? (\n                    <span className=\"is-flex is-flex-wrap-nowrap\">\n                      {title}\n                    </span>\n                  ) : (\n                    <span className=\"is-flex is-flex-wrap-nowrap\">\n                      {title}\n                      <SearchLink params={getSortedParams(\n                        normalizedTitle,\n                        sort,\n                        order,\n                      )}\n                      >\n                        <span className=\"icon\">\n                          <i\n                            className={classNames('fas', {\n                              'fa-sort': sort !== normalizedTitle,\n                              'fa-sort-up': sort === normalizedTitle && !order,\n                              'fa-sort-down': sort === normalizedTitle && order,\n                            })}\n                          />\n                        </span>\n                      </SearchLink>\n                    </span>\n                  )}\n              </th>\n            );\n          })}\n        </tr>\n      </thead>\n      <tbody>\n        {persons.map(person => (\n          <People key={person.slug} person={person} />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from '../types';\n\nexport function getCentury(person: Person, centuries: string[]) {\n  return centuries.includes(Math.ceil(person.born / 100).toString());\n}\n\nexport function getSortedPeople(\n  persons: Person[],\n  sort: string,\n  order: string,\n  query: string,\n  sex: string,\n  centuries: string[],\n): Person[] {\n  let personsClone = [...persons];\n\n  if (sort) {\n    personsClone = personsClone.sort((personA, personB) => {\n      switch (sort) {\n        case 'name':\n        case 'sex':\n          return personA[sort].localeCompare(personB[sort]);\n\n        case 'born':\n        case 'died':\n          return (+personA[sort]) - (+personB[sort]);\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (order) {\n    personsClone.reverse();\n  }\n\n  if (query) {\n    personsClone = personsClone.filter(({ name, motherName, fatherName }) => {\n      const preparedNames = (name + motherName + fatherName).toLowerCase();\n\n      return preparedNames.includes(query);\n    });\n  }\n\n  if (sex) {\n    personsClone = personsClone.filter(person => person.sex === sex);\n  }\n\n  if (centuries.length) {\n    personsClone = personsClone.filter(person => getCentury(person, centuries));\n  }\n\n  return personsClone;\n}\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\nimport { PeopleList } from './PeopleList';\nimport { getSortedPeople } from '../helpers/getSortedPeople';\n\nexport const PeoplePage = () => {\n  const [persons, setPersons] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const query = searchParams.get('query') || '';\n\n  useEffect(() => {\n    setIsLoading(true);\n    getPeople()\n      .then(setPersons)\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const preparedPeople = persons.map(person => {\n    return {\n      ...person,\n      mother: persons.find(({ name }) => person.motherName === name),\n      father: persons.find(({ name }) => person.fatherName === name),\n    };\n  });\n\n  const filteredPersons = getSortedPeople(\n    preparedPeople,\n    sort,\n    order,\n    query,\n    sex,\n    centuries,\n  );\n\n  const isSomethingWrong = isError && !isLoading;\n  const isLoaded = !isError && !isLoading;\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {!!persons.length && (\n              <PeopleFilters\n                query={query}\n                sex={sex}\n                centuries={centuries}\n              />\n            )}\n          </div>\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && (\n                <Loader />\n              )}\n\n              {isSomethingWrong && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {(!persons.length && isLoaded) && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {!filteredPersons.length && !isLoading && (\n                <p>There are no people matching the current search criteria</p>\n              )}\n\n              {!!filteredPersons.length && (\n                <PeopleList\n                  sort={sort}\n                  order={order}\n                  persons={filteredPersons}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","export const HomePage: React.FC = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import {\n  Navigate,\n  Route,\n  HashRouter as Router,\n  Routes,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { PageNotFound } from './components/PageNotFound';\nimport { PeoplePage } from './components/PeoplePage';\nimport { HomePage } from './components/HomePage';\n\nexport const Root = () => (\n  <Router>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<HomePage />} />\n        <Route path=\"people\">\n          <Route path=\":selectedPerson?\" element={<PeoplePage />} />\n        </Route>\n        <Route path=\"*\" element={<PageNotFound />} />\n        <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n      </Route>\n    </Routes>\n  </Router>\n);\n","import { createRoot } from 'react-dom/client';\nimport { Root } from './Root';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}